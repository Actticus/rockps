"""init

Revision ID: 52f259d72b67
Revises:
Create Date: 2022-11-27 17:36:52.252799

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import context
from alembic import op

# revision identifiers, used by Alembic.
revision = '52f259d72b67'
down_revision = None
branch_labels = None
depends_on = None



def upgrade():
    schema_upgrades()
    if not context.get_x_argument(as_dictionary=True).get('disable-data', None):
        data_upgrades()
    post_data_schema_upgrades()


def downgrade():
    before_data_schema_downgrades()
    if not context.get_x_argument(as_dictionary=True).get('disable-data', None):
        data_downgrades()
    schema_downgrades()



def schema_upgrades() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('confirmation_code_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('lobby',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_dt', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('password', postgresql.BYTEA(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('max_players', sa.Integer(), nullable=False),
    sa.Column('creator_id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('phone',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_dt', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.Column('number', sa.String(length=20), nullable=False),
    sa.Column('is_confirmed', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('uniq_confirmed_number_idx', 'phone', ['number'], unique=True, postgresql_where=sa.text('is_confirmed'))
    op.create_table('sex',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_dt', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.Column('nickname', sa.String(length=128), nullable=True),
    sa.Column('password', postgresql.BYTEA(), nullable=False),
    sa.Column('birth_date', sa.Date(), nullable=True),
    sa.Column('phone_id', sa.Integer(), nullable=False),
    sa.Column('sex_id', sa.Integer(), nullable=False),
    sa.Column('lobby_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['lobby_id'], ['lobby.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['phone_id'], ['phone.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['sex_id'], ['sex.id'], ondelete='cascade'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('certificate',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_dt', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='cascade'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('confirmation_code',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_dt', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.Column('value', sa.String(length=4), nullable=False),
    sa.Column('call_id', sa.String(length=32), nullable=True),
    sa.Column('phone_id', sa.Integer(), nullable=True),
    sa.Column('type_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['phone_id'], ['phone.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['type_id'], ['confirmation_code_type.id'], ondelete='cascade'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_foreign_key('lobby_creator_id_fkey', 'lobby', 'user', ['creator_id'], ['id'], ondelete='cascade')

    # ### end Alembic commands ###


def schema_downgrades() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('lobby_creator_id_fkey', 'lobby', type_='foreignkey')
    op.drop_table('confirmation_code')
    op.drop_table('certificate')
    op.drop_table('user')
    op.drop_table('sex')
    op.drop_index('uniq_confirmed_number_idx', table_name='phone', postgresql_where=sa.text('is_confirmed'))
    op.drop_table('phone')
    op.drop_table('lobby')
    op.drop_table('confirmation_code_type')
    # ### end Alembic commands ###

data = {
    "sex": [
        "male",
        "female",
    ],
    "confirmation_code_type": [
        "confirm",
        "reset",
    ],
}


def data_upgrades():
    connection = op.get_bind()
    for table_name, table_data in data.items():
        table = sa.Table(
            table_name,
            sa.MetaData(),
            sa.Column('id', sa.Integer),
            sa.Column('name', sa.String),
        )
        results = connection.execute(
            sa.select(
                [
                    table.c.id,
                ]
            )
        ).fetchall()
        if not results:
            op.bulk_insert(
                table,
                [
                    {'id': id, 'name': name}
                    for id, name in enumerate(table_data, start=1)
                ]
            )


def data_downgrades():
    for table_name, table_data in data.items():
        for id_, _ in enumerate(table_data, start=1):
            op.execute(f"delete from {table_name} where {table_name}.id={id_}")


def post_data_schema_upgrades():
    pass


def before_data_schema_downgrades():
    pass
