"""init

Revision ID: 589062bc221f
Revises:
Create Date: 2023-03-19 23:51:01.332387

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import context
from alembic import op

# revision identifiers, used by Alembic.
revision = '589062bc221f'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    schema_upgrades()
    if not context.get_x_argument(as_dictionary=True).get('disable-data', None):
        data_upgrades()
    post_data_schema_upgrades()


def downgrade():
    before_data_schema_downgrades()
    if not context.get_x_argument(as_dictionary=True).get('disable-data', None):
        data_downgrades()
    schema_downgrades()


def schema_upgrades():
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('card',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('confirmation_code_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('game_status',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('game_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('lobby_status',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('lobby_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('lobby',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_dt', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('creator_id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=True),
    sa.Column('lobby_status_id', sa.Integer(), server_default='1', nullable=False),
    sa.Column('lobby_type_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['lobby_status_id'], ['lobby_status.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['lobby_type_id'], ['lobby_type.id'], ondelete='cascade'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('phone',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_dt', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.Column('number', sa.String(length=20), nullable=False),
    sa.Column('is_confirmed', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('uniq_confirmed_number_idx', 'phone', ['number'], unique=True, postgresql_where=sa.text('is_confirmed'))
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_dt', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.Column('nickname', sa.String(length=128), nullable=True),
    sa.Column('password', postgresql.BYTEA(), nullable=False),
    sa.Column('phone_id', sa.Integer(), nullable=False),
    sa.Column('current_lobby_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['current_lobby_id'], ['lobby.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['phone_id'], ['phone.id'], ondelete='cascade'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('certificate',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_dt', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='cascade'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('confirmation_code',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_dt', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.Column('value', sa.String(length=4), nullable=False),
    sa.Column('call_id', sa.String(length=32), nullable=True),
    sa.Column('phone_id', sa.Integer(), nullable=True),
    sa.Column('type_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['phone_id'], ['phone.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['type_id'], ['confirmation_code_type.id'], ondelete='cascade'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('game',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_dt', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.Column('lobby_id', sa.Integer(), nullable=False),
    sa.Column('creator_id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=False),
    sa.Column('creator_card_id', sa.Integer(), nullable=True),
    sa.Column('player_card_id', sa.Integer(), nullable=True),
    sa.Column('game_status_id', sa.Integer(), server_default='1', nullable=False),
    sa.Column('game_type_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['creator_card_id'], ['card.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['creator_id'], ['user.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['game_status_id'], ['game_status.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['game_type_id'], ['lobby_type.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['lobby_id'], ['lobby.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['player_card_id'], ['card.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['player_id'], ['user.id'], ondelete='cascade'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_foreign_key('lobby_playerid_idx', 'lobby', 'user', ['player_id'], ['id'], ondelete='cascade')
    op.create_foreign_key('lobby_creatorid_idx', 'lobby', 'user', ['creator_id'], ['id'], ondelete='cascade')
    # ### end Alembic commands ###


def schema_downgrades():
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('game')
    op.drop_table('confirmation_code')
    op.drop_table('certificate')
    op.drop_table('user')
    op.drop_index('uniq_confirmed_number_idx', table_name='phone', postgresql_where=sa.text('is_confirmed'))
    op.drop_table('phone')
    op.drop_table('lobby_type')
    op.drop_table('lobby_status')
    op.drop_table('lobby')
    op.drop_table('game_type')
    op.drop_table('game_status')
    op.drop_table('confirmation_code_type')
    op.drop_table('card')
    # ### end Alembic commands ###


data = {
    "confirmation_code_type": {
        1: "confirm",
        2: "reset",
    },
    "card": {
        1: "rock",
        2: "paper",
        3: "scissors",
        4: "lizard",
        5: "spock",
    },
    "lobby_status": {
        1: "opened",
        2: "active",
        3: "finished",
        4: "cancelled",
    },
    "lobby_type": {
        1: "standard",
        2: "extended",
    },
    "game_status": {
        1: "pending",
        2: "active",
        3: "finished",
        4: "cancelled",
    },
    "game_type": {
        1: "standard",
        2: "extended",
    },
}


def data_upgrades():
    connection = op.get_bind()
    for table_name, table_data in data.items():
        table = sa.Table(
            table_name,
            sa.MetaData(),
            sa.Column('id', sa.Integer),
            sa.Column('name', sa.String),
        )
        results = connection.execute(
            sa.select(
                table.c.id,
            ).where(
                table.c.id.in_(table_data.keys())
            )
        ).fetchall()
        if not results:
            op.bulk_insert(
                table,
                [
                    {'id': id_, 'name': name}
                    for id_, name in table_data.items()
                ]
            )


def data_downgrades():
    """Add any optional data downgrade migrations here!"""
    pass


def post_data_schema_upgrades():
    pass


def before_data_schema_downgrades():
    pass
